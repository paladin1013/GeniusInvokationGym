from typing import Optional, cast

### import other status from card files
from gisim.cards import get_character_status as import_cards_character_status
from gisim.cards import get_combat_status as import_cards_combat_status
from gisim.classes.enums import CharPos, ElementType, PlayerID
from gisim.classes.status import CharacterStatusEntity, CombatStatusEntity
from gisim.env import INF_INT

from .reaction_status import *

###


def get_combat_status(
    player_id: PlayerID,
    remaining_round: int,
    status_id: Optional[int] = None,
    status_name: Optional[str] = None,
):
    if status_name is not None:
        status_name = status_name.replace(" ", "").replace("'", "")
        if not status_name.endswith("Status"):
            status_name += "Status"
        if status_name in globals():
            status_class = globals()[status_name]
            status: CombatStatusEntity = status_class(
                player_id=player_id, remaining_round=remaining_round
            )
            return status

    return import_cards_combat_status(
        player_id, remaining_round, status_id, status_name
    )


def get_character_status(
    player_id: PlayerID,
    position: CharPos,
    remaining_round: int,
    status_id: Optional[int] = None,
    status_name: Optional[str] = None,
):
    if status_name is not None:
        status_name = status_name.replace(" ", "")
        if not status_name.endswith("Status"):
            status_name += "Status"
        if status_name.endswith("InfusionStatus"):
            elem_char = status_name.replace("InfusionStatus", "").upper()
            element: ElementType = eval(f"ElementType.{elem_char}")
            # TODO: It seems that elemental infusion generated by different characters have different ids
            status = ElementalInfusionStatus(
                id=1002,  # TODO: Temporary id, to be updated
                name=status_name,
                player_id=player_id,
                position=position,
                remaining_round=remaining_round,
                element=element,
            )
            status = cast(CharacterStatusEntity, status)
            return status

        if status_name in globals():
            status_class = globals()[status_name]
            status: CharacterStatusEntity = status_class(
                player_id=player_id, position=position, remaining_round=remaining_round
            )
            return status

    return import_cards_character_status(
        player_id, position, remaining_round, status_id, status_name
    )
